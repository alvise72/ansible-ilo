---
- name: Query iLO information
  hosts: all
  gather_facts: false
  vars:
    - type: 'hd'
    - baseapi: '/redfish/v1/'
    - baseapibios: '/redfish/v1/Systems/1/bios'
    - url: {
        'gen9': '/boot',
        'gen10': '/boot',
        'gen10p': '/oem/hpe/boot/settings/'
      }
    - urlpatch: {
        'gen9': '/rest/v1/systems/1/bios/boot/settings',
        'gen10': '/boot',
        'gen10p': '/oem/hpe/boot/settings/'
      }
    - pathshowboot: {
        'gen9':   '/redfish/v1/systems/1/bios/boot/settings/',
        'gen10':  '/redfish/v1/systems/1/bios/boot/settings/',
        'gen10p': '/redfish/v1/systems/1/bios/oem/hpe/boot/settings/'
      }
    - gen: 'gen9'

  tasks:
    - name: Gather summary information
      uri:
        url: 'https://{{ inventory_hostname }}{{baseapi}}'
        method: GET
        return_content: yes
        url_username: '{{ username }}'
        url_password: '{{ password }}'
        validate_certs: false
        status_code: 200
        use_proxy: false
        force_basic_auth: true
      register: query
      delegate_to: localhost
      no_log: '{{nolog}}'
      changed_when: false

    - name: Determine if Gen9
      set_fact:
        gen: 'gen9'
      when: query.json.Product is not defined
      changed_when: false
      no_log: '{{ nolog }}'

    - name: Determine if Gen10
      set_fact:
        gen: 'gen10'
      when:
        - query.json.Product is defined
        - query.json.Product is match(".*Gen10")
      changed_when: false
      no_log: '{{ nolog }}'

    - name: Determine if Gen10+
      set_fact:
        gen: 'gen10p'
      when:
        - query.json.Product is defined
        - query.json.Product is match(".*Gen10 Plus")
      changed_when: false
      no_log: '{{ nolog }}'

    ##########################################################################
    #
    # Now we know which GenX is the server and then we can select the proper
    # API to query
    #
    - name: Gathering Bios Info
      uri:
        url: 'https://{{ inventory_hostname }}{{pathshowboot[gen]}}'
        method: GET
        return_content: yes
        url_username: '{{ username }}'
        url_password: '{{ password }}'
        validate_certs: false
        status_code: 200
        use_proxy: false
        force_basic_auth: true
      register: query
      delegate_to: localhost
      no_log: '{{nolog}}'
      changed_when: false

    - name: Showing BOOT ORDER
      debug: 
        msg: '{{ query.json.PersistentBootConfigOrder }}'
      
    - meta: end_play
      when: show is defined

    ##########################################################################
    #
    # If not only-show is selected, then proceed with boot order change
    #

    #- name: Init array_boot_devices (Gen10/Gen10+)
    #  set_fact: 
    #    array_boot_devices: []
    #  no_log: '{{ nolog }}'
    #  when: gen == 'gen10' or gen == 'gen10p'

    #- name: Gather boot device IDs (Gen10/Gen10+)
    #  set_fact:
    #    array_boot_devices: '{{ array_boot_devices + [ ( item | to_json(ensure_ascii=False) | split(": "))[1][2:-3]]  }}'
    #  loop: '{{ query.json.Members }}'
    #  loop_control:
    #    label: ""
    #  no_log: '{{ nolog }}'
    #  when: gen == 'gen10' or gen == 'gen10p'

    #- name: Gather boot device names (Gen10/Gen10+)
    #  uri:
    #    url: 'https://{{ inventory_hostname }}/{{item}}'
    #    method: GET
    #    return_content: yes
    #    url_username: '{{ username }}'
    #    url_password: '{{ password }}'
    #    validate_certs: false
    #    status_code: 200
    #    use_proxy: false
    #    force_basic_auth: true
    #  register: querybootdev
    #  delegate_to: localhost
    #  no_log: '{{nolog}}'
    #  changed_when: false
    #  loop: '{{ array_boot_devices }}'
    #  loop_control:
    #    label: ""
    #  when: gen == 'gen10' or gen == 'gen10p'

    #- set_fact:
    #    bootdevs: []
    #  no_log: '{{nolog}}'
    #  when: gen == 'gen10' or gen == 'gen10p'

    #- name: Collecting all boot devices (Gen10/Gen10+)
    #  set_fact:
    #    bootdevs: '{{ bootdevs + [item.json.DisplayName] }}'
    #  loop: '{{ querybootdev.results }}'
    #  loop_control:
    #    label: ""
    #  no_log: '{{nolog}}'
    #  when: gen == 'gen10' or gen == 'gen10p'

    - set_fact:
        otherdevs: []
        nicdevs: []
    
    - set_fact:
        matchboot: '.*IPv4'
      when: type == 'net'

    - set_fact:
        matchboot: 'HD.*'
      when: type == 'hd'

    - debug:
        msg: 'Matchboot={{ matchboot }}'

    - set_fact:
        nicdevs: '{{ nicdevs + [item] }}'
      loop: "{{ query.json.PersistentBootConfigOrder }}"
      loop_control:
        label: ""
      when: item is match( matchboot )

    - set_fact:
        otherdevs: '{{ otherdevs + [item] }}'
      loop: "{{ query.json.PersistentBootConfigOrder }}"
      loop_control:
        label: ""
      when: item is not match( matchboot )
    
    - set_fact:
        alldevs: '{{ (nicdevs|sort) + otherdevs  }}'

    - set_fact:
        body: '{ "PersistentBootConfigOrder": {{ alldevs | to_json }} }'

    - debug:
        msg: 
          - 'Gen: {{gen}}'
          - 'BODY: {{body}}'
          - 'URL: https://{{ inventory_hostname }}{{ urlpatch[gen] }}'
    #- meta: end_play

    - name: Patch BIOS/Boot/settings - PersistentBootConfigOrder
      uri:
        url: 'https://{{ inventory_hostname }}{{ urlpatch[gen] }}'
        method: PATCH
        return_content: yes
        url_username: '{{ username }}'
        url_password: '{{ password }}'
        validate_certs: false
        status_code: 200
        use_proxy: false
        force_basic_auth: true
        body_format: json
        body: " {{ body }} "
      register: query
      delegate_to: localhost
      no_log: '{{nolog}}'
      changed_when: false
...
